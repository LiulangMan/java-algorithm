//问题描述
//　　观察这个数列：
//　　1 3 0 2 -1 1 -2 ...
//
//　　这个数列中后一项总是比前一项增加2或者减少3。
//
//　　栋栋对这种数列很好奇，他想知道长度为 n 和为 s 而且后一项总是比前一项增加a或者减少b的整数数列可能有多少种呢？
//输入格式
//　　输入的第一行包含四个整数 n s a b，含义如前面说述。
//输出格式
//　　输出一行，包含一个整数，表示满足条件的方案数。由于这个数很大，请输出方案数除以100000007的余数。
//


#include <iostream>
#include <cstring>

using namespace std;
typedef long long LL;//10^19
LL MOD = 100000007;

void solve1(int n, int s, int a, int b);

void df(int n, int x, int s, int a, int b);

void solve2(int n, int s, int a, int b);

LL ans = 0;

int main() {

    int n, s, a, b;
    cin >> n >> s >> a >> b;
    //solve1(n,s,a,b);
    solve2(n, s, a, b);
    cout << ans;

}

void solve2(int n, int s, int a, int b) {
    LL ta_max = n * (n - 1) / 2;
    LL arr[n][ta_max];
    memset(arr, 0, sizeof(arr));
    for (int i = 0; i < n; ++i) {//初始化
        arr[i][0] = 1;
    }
    for (LL i = 1; i <= n - 1; ++i) {
        for (LL j = 0; j <= ta_max; ++j) {
            if(i>j){
                arr[i][j] = arr[i - 1][j] % MOD;
                continue;
            }
            arr[i][j] = (arr[i - 1][j] % MOD + arr[i - 1][j - i] % MOD) % MOD;
        }
    }
    for (LL ta = 0; ta <= ta_max; ++ta) {
        if ((s - ta * a + (ta_max - ta) * b) % n == 0) {
            ans = (ans + arr[n-1][ta])%MOD;
        }
    }
}

void solve1(int n, int s, int a, int b) {
    //LL x=0;
    LL x_min = (s - n * (n - 1) * a / 2) / n;
    LL x_max = (s + n * (n - 1) * b / 2) / n;
    for (LL x = x_min; x <= x_max; ++x) {
        df(n - 1, x, s, a, b);
        df(n - 1, x, s, a, b);
    }
}


void df(int n, int x, int s, int a, int b) {
    if (n == 0) {
        if (x == s)ans++;
        return;
    }
    df(n - 1, x + a, s, a, b);
    df(n - 1, x - b, s, a, b);
}